/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.PatientRole;

import Business.Drug.Drug;
import Business.Drug.DrugItem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.DoctorOrganization;
import Business.Patient.Patient;
import Business.Prescription.DrugContents;
import Business.Prescription.DrugItems;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AddDrugWorkRequest;
import Business.WorkQueue.AddInventoryWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Bhavna Menghrajani
 */
public class DrugsRequestStatusJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;

    private Enterprise enterprise;
    private UserAccount userAccount;
    private Network network;
    private Patient patient;
    private DrugContents drugContents;

    /**
     * Creates new form DrugsRequestStatusJPanel
     */
    public DrugsRequestStatusJPanel(JPanel userProcessContainer, UserAccount account, Enterprise enterprise, Network network) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.userAccount = account;
        this.network = network;
        patient = (Patient) userAccount.getPerson();
        drugContents = patient.getDrugContents();
        populateDrugRequest();
    }

    public void populateDrugRequest() {
        DefaultTableModel model = (DefaultTableModel) tblWorkRequest.getModel();

        model.setRowCount(0);

        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()) {
            if (request instanceof AddDrugWorkRequest) {
                Object[] row = new Object[6];
                row[0] = request;
                row[1] = request.getSender().getPerson().getFirstName();
                row[2] = request.getReceiver() == null ? null : request.getReceiver().getPerson().getFirstName();
                row[3] = request.getRequestDate();
                row[4] = request.getMessage();
                row[5] = request.getStatus();

                model.addRow(row);

            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblWorkRequest = new javax.swing.JTable();
        btnSetStatus = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnView = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDrugItem = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();

        setLayout(null);

        tblWorkRequest.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        tblWorkRequest.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Drug Request", "Patient", "Receiver", "Request Date", "Message", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblWorkRequest);
        if (tblWorkRequest.getColumnModel().getColumnCount() > 0) {
            tblWorkRequest.getColumnModel().getColumn(0).setMinWidth(0);
            tblWorkRequest.getColumnModel().getColumn(0).setPreferredWidth(0);
            tblWorkRequest.getColumnModel().getColumn(0).setMaxWidth(0);
        }

        add(jScrollPane1);
        jScrollPane1.setBounds(50, 120, 810, 240);

        btnSetStatus.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        btnSetStatus.setText("Mark request as fulfilled");
        btnSetStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetStatusActionPerformed(evt);
            }
        });
        add(btnSetStatus);
        btnSetStatus.setBounds(560, 390, 300, 40);

        btnBack.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack);
        btnBack.setBounds(50, 50, 77, 31);

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        jLabel1.setText("Drugs Request Status");
        add(jLabel1);
        jLabel1.setBounds(360, 30, 260, 30);

        btnView.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        btnView.setText("View Quantity Received");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });
        add(btnView);
        btnView.setBounds(50, 390, 290, 40);

        tblDrugItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Drug Id", "Drug Name", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblDrugItem);

        add(jScrollPane2);
        jScrollPane2.setBounds(50, 490, 810, 180);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/background2.jpg"))); // NOI18N
        jLabel2.setText("jLabel2");
        add(jLabel2);
        jLabel2.setBounds(0, 0, 2000, 990);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSetStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetStatusActionPerformed
        // TODO add your handling code here:
        int row = tblWorkRequest.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select an entry form the table", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        AddDrugWorkRequest adwr = (AddDrugWorkRequest) tblWorkRequest.getValueAt(row, 0);
        if (adwr.getStatus().equals("Fulfilled")) {
            JOptionPane.showMessageDialog(null, "This request has already been fulfilled");
            return;
        }
        if (!(adwr.getStatus().equals("Drugs delivered"))) {
            JOptionPane.showMessageDialog(null, "Drugs have not been received. Please try after some time.");
            return;
        }
        adwr.setStatus("Fulfilled");
        JOptionPane.showMessageDialog(null, "The request has been fulfilled succesfully");

        JOptionPane.showMessageDialog(null, "Updating Stock for the Patient");

        ArrayList<DrugItem> drugItemList = adwr.getDrugItemList();

        updateInventory(drugItemList);

        populateDrugRequest();
    }//GEN-LAST:event_btnSetStatusActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        backAction();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:

        int row = tblWorkRequest.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select an entry form the table", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        AddDrugWorkRequest adwr = (AddDrugWorkRequest) tblWorkRequest.getValueAt(row, 0);

        DefaultTableModel dtm = (DefaultTableModel) tblDrugItem.getModel();
        dtm.setRowCount(0);
        for (DrugItem drugItem : adwr.getDrugItemList()) {

            Object r[] = new Object[3];
            r[0] = drugItem.getDrug().getDrugId();
            r[1] = drugItem.getDrug().getDrugName();
            r[2] = drugItem.getQuantity();
            dtm.addRow(r);

        }


    }//GEN-LAST:event_btnViewActionPerformed

    public void backAction() {
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        PatientWorkAreaJPanel patientWorkAreaJPanel = (PatientWorkAreaJPanel) component;
        patientWorkAreaJPanel.populateDiagnosisHistory();
    //    patientWorkAreaJPanel.populateContents();

        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSetStatus;
    private javax.swing.JButton btnView;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblDrugItem;
    private javax.swing.JTable tblWorkRequest;
    // End of variables declaration//GEN-END:variables

    private void updateInventory(ArrayList<DrugItem> drugItemList) {

        for (DrugItem di : drugItemList) {
            for (DrugItems drugItems : patient.getDrugContents().getDrugItemList()) {
                if (di.getDrug() == drugItems.getDrugItem().getDrug()) {
                    Drug d = di.getDrug();
                    drugItems.setQuantity(drugItems.getQuantity() + di.getQuantity());
                    drugItems.setTotalQuantity(drugItems.getTotalQuantity() + d.getContents() * di.getQuantity());

                }
            }
        }
        JOptionPane.showMessageDialog(null, "Drugs added to the stock.");

    }

}
