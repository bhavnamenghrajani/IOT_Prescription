/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.PatientRole;

import Business.Patient.Patient;
import Business.Prescription.DrugDosageTrack;
import Business.Prescription.DrugDosages;
import Business.Prescription.DrugItems;
import Business.Prescription.Frequency;
import Business.Prescription.FrequencyTrack;
import Business.Prescription.PrescriptionTrack;
import Business.Prescription.PrescriptionTrackHistory;
import java.awt.CardLayout;
import java.awt.Component;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.DoctorRole.DoctorWorkAreaPanel;
import userinterface.DoctorRole.ViewPrescriptionTrackJPanel;

/**
 *
 * @author Bhavna Menghrajani
 */
public class DrugTrackingJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Patient patient;
    private PrescriptionTrackHistory prescriptionTrackHistory;
    private SimpleDateFormat displayFormat, convertDate;

    /**
     * Creates new form DrugTrackingJPanel
     */
    public DrugTrackingJPanel(JPanel userProcessContainer, Patient patient) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.patient = patient;
        prescriptionTrackHistory = patient.getPrescriptionTrackHistory();
        displayFormat = new SimpleDateFormat("EEE, MMM d, ''yy");
        convertDate = new SimpleDateFormat("dd/MM/yyyy");
        populatePrescription();
    }

    public void populatePrescription() {
        DefaultTableModel dtm = (DefaultTableModel) prescriptionJTable.getModel();
        dtm.setRowCount(0);
        for (PrescriptionTrack prescriptionTrack : prescriptionTrackHistory.getPrescriptionTrack()) {
            Object r[] = new Object[6];
            r[0] = prescriptionTrack;
            r[1] = prescriptionTrack.getPrescription().getStatus();
            dtm.addRow(r);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        prescriptionJTable = new javax.swing.JTable();
        btnShowPrescription = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDrugdosage = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        trackingJTable = new javax.swing.JTable();
        btnRetrieve = new javax.swing.JButton();
        btnSensor = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setLayout(null);

        prescriptionJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Prescription ID", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(prescriptionJTable);

        add(jScrollPane1);
        jScrollPane1.setBounds(68, 51, 810, 180);

        btnShowPrescription.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        btnShowPrescription.setText("Show Prescription");
        btnShowPrescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowPrescriptionActionPerformed(evt);
            }
        });
        add(btnShowPrescription);
        btnShowPrescription.setBounds(910, 90, 230, 45);

        tblDrugdosage.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tracking Id", "Drug Id", "Morning", "Afternoon", "Evening", "Night", "No of days"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblDrugdosage);

        add(jScrollPane2);
        jScrollPane2.setBounds(70, 250, 811, 157);

        trackingJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date taken", "Morning", "Afternoon", "Evening", "Night"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(trackingJTable);

        add(jScrollPane3);
        jScrollPane3.setBounds(70, 440, 811, 261);

        btnRetrieve.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        btnRetrieve.setText("Retrieve");
        btnRetrieve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRetrieveActionPerformed(evt);
            }
        });
        add(btnRetrieve);
        btnRetrieve.setBounds(900, 270, 250, 40);

        btnSensor.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        btnSensor.setText("Read data from sensor");
        btnSensor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSensorActionPerformed(evt);
            }
        });
        add(btnSensor);
        btnSensor.setBounds(900, 330, 250, 50);

        btnBack.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack);
        btnBack.setBounds(70, 10, 77, 31);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/background2.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        add(jLabel1);
        jLabel1.setBounds(0, 0, 1990, 1000);
    }// </editor-fold>//GEN-END:initComponents

    private void btnShowPrescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowPrescriptionActionPerformed
        // TODO add your handling code here:

        DefaultTableModel model = (DefaultTableModel) tblDrugdosage.getModel();
        model.setRowCount(0);

        int row = prescriptionJTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select an entry form the table", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        PrescriptionTrack pt = (PrescriptionTrack) prescriptionJTable.getValueAt(row, 0);
        for (DrugDosageTrack ddt : pt.getDrugDosageTrackList()) {
            Object r[] = new Object[7];
            r[0] = ddt;
            r[1] = ddt.getDrugDosages().getDrug();
            r[2] = ddt.getDrugDosages().getFrequency().getMorning();
            r[3] = ddt.getDrugDosages().getFrequency().getAfternoon();
            r[4] = ddt.getDrugDosages().getFrequency().getEvening();
            r[5] = ddt.getDrugDosages().getFrequency().getNight();
            r[6] = ddt.getDrugDosages().getNoOfDays();
            model.addRow(r);

        }

    }//GEN-LAST:event_btnShowPrescriptionActionPerformed

    private void btnRetrieveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRetrieveActionPerformed
        // TODO add your handling code here:
        displayTrackingTable();
    }//GEN-LAST:event_btnRetrieveActionPerformed
    public void displayTrackingTable() {
        int row = tblDrugdosage.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select an entry form the table", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        DrugDosageTrack drugDosageTrack = (DrugDosageTrack) tblDrugdosage.getValueAt(row, 0);
        DefaultTableModel dtm = (DefaultTableModel) trackingJTable.getModel();
        dtm.setRowCount(0);
        for (FrequencyTrack ft : drugDosageTrack.getFrequencyTrackList()) {
            Object r[] = new Object[5];
            r[0] = displayFormat.format(ft.getDateDrugTaken());
            r[1] = ft.getFrequency().getMorning();
            r[2] = ft.getFrequency().getAfternoon();
            r[3] = ft.getFrequency().getEvening();
            r[4] = ft.getFrequency().getNight();

            dtm.addRow(r);

        }

        DrugDosages drugDosage = drugDosageTrack.getDrugDosages();
        Frequency f = drugDosage.getFrequency();
        System.out.println(drugDosage.getDrug());
        System.out.println(drugDosage.getDrug().getDrugName());
        System.out.println("Morning" + f.getMorning());
        System.out.println("Afternoon" + f.getAfternoon());
        System.out.println("Evening" + f.getEvening());
        System.out.println("Night" + f.getNight());
        for (int tc = 1; tc < trackingJTable.getColumnCount(); tc++) {
            for (int tr = 0; tr < trackingJTable.getRowCount(); tr++) {
                if (tc == 1) {
                    if ((Integer) trackingJTable.getValueAt(tr, tc) != f.getMorning()) {
                        trackingJTable.setValueAt("<html><h3><b><font color=\"red\">" + trackingJTable.getValueAt(tr, tc) + "</font></b></h3></html>", tr, tc);
                    }
                }
                if (tc == 2) {
                    if ((Integer) trackingJTable.getValueAt(tr, tc) != f.getAfternoon()) {
                        trackingJTable.setValueAt("<html><h3><b><font color=\"red\">" + trackingJTable.getValueAt(tr, tc) + "</font></b></h3></html>", tr, tc);

                    }

                }
                if (tc == 3) {
                    if ((Integer) trackingJTable.getValueAt(tr, tc) != f.getEvening()) {
                        trackingJTable.setValueAt("<html><h3><b><font color=\"red\">" + trackingJTable.getValueAt(tr, tc) + "</font></b></h3></html>", tr, tc);

                    }

                }
                if (tc == 4) {
                    if ((Integer) trackingJTable.getValueAt(tr, tc) != f.getNight()) {
                        trackingJTable.setValueAt("<html><h3><b><font color=\"red\">" + trackingJTable.getValueAt(tr, tc) + "</font></b></h3></html>", tr, tc);

                    }
                }

            }

        }
    }


    private void btnSensorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSensorActionPerformed
        try {
            // TODO add your handling code here:
            readCSV();
        } catch (ParseException ex) {
            Logger.getLogger(DrugTrackingJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        JOptionPane.showMessageDialog(null, "Data received from sensor");
    }//GEN-LAST:event_btnSensorActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        backAction();
    }//GEN-LAST:event_btnBackActionPerformed

    public void backAction() {
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        PatientWorkAreaJPanel patientWorkAreaJPanel = (PatientWorkAreaJPanel) component;
        patientWorkAreaJPanel.populateDiagnosisHistory();
    //    patientWorkAreaJPanel.populateContents();

        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);

    }

    public void readCSV() throws ParseException {

        int morning = 0;
        int afternoon = 0;
        int evening = 0;
        int night = 0;

        int row = tblDrugdosage.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select an entry form the table", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        DrugDosageTrack ddt = (DrugDosageTrack) tblDrugdosage.getValueAt(row, 0);

        String csvFileToRead = System.getProperty("user.dir") + "\\csvfile\\datafromsensor.csv";
        BufferedReader br = null;
        String line = "";
        String splitBy = ",";
        int count = 0;

        try {

            br = new BufferedReader(new FileReader(csvFileToRead));
            while ((line = br.readLine()) != null) {

                String[] sensed = line.split(splitBy);

                if (!(sensed[1].equals(""))) {
                    morning = Integer.parseInt(sensed[1]);

                }
                if (!(sensed[2].equals(""))) {
                    afternoon = Integer.parseInt(sensed[2]);
                }
                if (!(sensed[3].equals(""))) {
                    evening = Integer.parseInt(sensed[3]);
                }
                if (!(sensed[4].equals(""))) {
                    night = Integer.parseInt(sensed[4]);
                }
                Date retrievedDate = convertDate.parse(sensed[0]);

                boolean found = false;

                for (DrugItems di : patient.getDrugContents().getDrugItemList()) {
                    if (di.getDrugItem().getDrug() == ddt.getDrugDosages().getDrug()) {
                        for (FrequencyTrack ft : ddt.getFrequencyTrackList()) {
                            if (retrievedDate.equals(ft.getDateDrugTaken())) {
                                System.out.println("Retrieved date: " + retrievedDate);
                                System.out.println("Frequency date: " + ft.getDateDrugTaken());
                                found = true;

                                if (!(ft.getFrequency().getMorning() == (morning))) {
                                    di.setTotalQuantity(di.getTotalQuantity() - morning);
                                    count = count + morning;
                                }
                                if (!(ft.getFrequency().getAfternoon() == (afternoon))) {
                                    di.setTotalQuantity(di.getTotalQuantity() - afternoon);
                                    count = count + afternoon;
                                }
                                if (!(ft.getFrequency().getEvening() == (evening))) {
                                    di.setTotalQuantity(di.getTotalQuantity() - evening);
                                    count = count + evening;
                                }
                                if (!(ft.getFrequency().getNight() == (night))) {
                                    di.setTotalQuantity(di.getTotalQuantity() - night);
                                    count = count + night;
                                }

                                ft.getFrequency().setMorning(morning);
                                ft.getFrequency().setAfternoon(afternoon);
                                ft.getFrequency().setEvening(evening);
                                System.out.println("Data: " + sensed[3]);
                                ft.getFrequency().setNight(night);

                            }

                        }
                        if (!found) {
                            FrequencyTrack frequencyTrack = new FrequencyTrack();
                            try {
                                frequencyTrack.setDateDrugTaken(convertDate.parse(sensed[0]));
                            } catch (ParseException ex) {
                                Logger.getLogger(ViewPrescriptionTrackJPanel.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            frequencyTrack.getFrequency().setMorning(morning);
                            frequencyTrack.getFrequency().setAfternoon(afternoon);
                            frequencyTrack.getFrequency().setEvening(evening);
                            System.out.println("Data: " + sensed[3]);
                            frequencyTrack.getFrequency().setNight(night);
                            ddt.getFrequencyTrackList().add(frequencyTrack);
                            di.setTotalQuantity(di.getTotalQuantity() - morning);
                            di.setTotalQuantity(di.getTotalQuantity() - afternoon);
                            di.setTotalQuantity(di.getTotalQuantity() - evening);
                            di.setTotalQuantity(di.getTotalQuantity() - night);
                            count = count + morning + evening + afternoon + night;
                            found = false;
                        }
                    }
                }

            }
            
            if (count != 0) {
                for (DrugItems di : patient.getDrugContents().getDrugItemList()) {
                    if (di.getDrugItem().getDrug() == ddt.getDrugDosages().getDrug()) {
                        {

                           if(di.getTotalQuantity()<=0)
                           {
                            int original_quantity = di.getTotalQuantity() + count;
                            System.out.println(count);
                            System.out.println(di.getTotalQuantity() + count);
                            System.out.println(original_quantity);
                            int x = (di.getTotalQuantity() * di.getQuantity()) / original_quantity;
                            System.out.println(di.getQuantity());
                            System.out.println(di.getTotalQuantity() * di.getQuantity());
                            di.setQuantity(x + 1);
                           }
                           else
                           {
                               JOptionPane.showMessageDialog(null, "Drugs low in stock. Error in data received");
                           }
                        }
                    }
                }
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (br != null) {
                try {
                    br.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }

        System.out.println("Done with reading CSV");

        // displayTrackingTable();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnRetrieve;
    private javax.swing.JButton btnSensor;
    private javax.swing.JButton btnShowPrescription;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable prescriptionJTable;
    private javax.swing.JTable tblDrugdosage;
    private javax.swing.JTable trackingJTable;
    // End of variables declaration//GEN-END:variables

}
